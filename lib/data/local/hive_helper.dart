import 'package:hive_flutter/adapters.dart';import 'package:texnomartoriginal/data/api/products/product.dart';import 'package:texnomartoriginal/data/local/products_hive.dart';class HiveHelper {  static Future<void> init() async {    await Hive.initFlutter();    Hive.registerAdapter(ProductItemsModelAdapter());    await Hive.openBox('basket');    await Hive.openBox('favourite');  }  static Future<bool> addProductToBasket(ProductData product) async {    try {      var box = Hive.box('basket');      bool isBasket = true;      if (box.values.contains(product.id)) {        isBasket = false;      }      if (isBasket) {        box.put(product.id, product);      }      return true;    } catch (e) {      print(e);      return false;    }  }  static Future<void> updateProductInBasket(ProductData product) async {    var box = Hive.box('basket');    if (box.containsKey(product.id)) {      box.put(product.id, product);    }  }  static Future<bool> addProductToFavourite(ProductData productHolder) async {    try {      var basketBox = Hive.box('basket');      var favouriteBox = Hive.box('favourite');      bool isBasket = true;      if (basketBox.values.contains(productHolder.id)) {        isBasket = false;      }      if (isBasket) {        // Clone the object before storing it in the 'favourite' box        var clonedProduct = ProductData(          productHolder.name,          productHolder.image,          productHolder.value,          productHolder.price,          productHolder.count,          productHolder.isSaved,          productHolder.id,          // ... (copy other fields accordingly)        );        favouriteBox.put(clonedProduct.id, clonedProduct);      }      return true;    } catch (e) {      print(e);      return false;    }  }  static List<ProductData> getAllProductsFromBasket() {    final box = Hive.box('basket');    return box.values.cast<ProductData>().toList();  }  static List getAllKeysProductsFromFavourite() {    final box = Hive.box('favourite');    return box.keys.toList();  }  static Future<void> deleteBasket() async {    final box = Hive.box('basket');    box.clear();  }  static Future<void> deleteProductFromBasket(ProductData productHolder) async {    var box = Hive.box('basket');    box.delete(productHolder.id);  }  static void deleteProductFromFavourite(ProductData productHolder) {    var box = Hive.box('favourite');    box.delete(productHolder.id);  }  static List<ProductData> getAllFavouriteProducts() {    final box = Hive.box('favourite');    return box.values.cast<ProductData>().toList();  }}